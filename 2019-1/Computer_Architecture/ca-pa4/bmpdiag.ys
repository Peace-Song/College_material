#------------------------------------------------------------------
# 
#  4190.308 Computer Architecture (Spring 2019)
#
#  Project #4: Optimizing Program for a Pipelined Y86-64 Processor
#
#  May 28, 2019
#
#  Jin-Soo Kim (jinsoo.kim@snu.ac.kr)
#  Systems Software & Architecture Laboratory
#  Dept. of Computer Science and Engineering
#  Seoul National University
#
#------------------------------------------------------------------

bmp_diag:
	# imgptr        is in %rdi  CONSTANT
	# width         is in %rsi  CONSTANT
	# height        is in %rdx  CONSTANT
	# gap 	        is in %rcx  CONSTANT
    # curr imgptr   is in %rax
    # initial gap   is in %rbx
    # padding       is in %r8   CONSTANT
    # row_length    is in %r9   CONSTANT
    # curr row ptr  is in %r10
    # curr width    is in %r11  CONSTANT except initiate draw
    # 3 * gap       is in %r12  
    # 0x00          is in %r13  CONSTANT except calculate padding
    # 0xff          is in %r14  CONSTANT except calculate padding
	#-----------------------------------------------------------------

	# FILL HERE
	# You are allowed to use any register supported by Y86-64 architecture
    # Hazard cost cycles:
    # RAW:  3 cycles
    # L/U:  3 cycles
    # call: 3 cycles
    # ret:  2 cycles
    # mispredicted branch: 2 cycles

    # calculate padding
    rrmovq %rsi, %r8            # $r8 == width
    irmovq $3, %r14             # temporal imm. assignment
    rrmovq %rsi, %r12           # $r12 == width
    irmovq $4, %r13             # temporal imm. assignment
        rrmovq %rdx, %r11       # FWD: $r11 == height
    mulq %r14, %r12             # $r12 == 3 * width
    mulq %r14, %r8              # $r8 == 3 * width
        rrmovq %rdi, %rax       # FWD: assign current imgptr
    divq %r13, %r12             # %r12 has quotient of 3 * width divided by 4
        iaddq $-1, %r11         # FWD: $r11 == height - 1
    mulq %r14, %r12             # $r12 == divisor * quotient
        rrmovq %r8, %r9         # FWD: $r9 == 3 * width
    subq %r12, %r8              # %r8 = $r8 - $r12 == 3 * width mod 4
    
    # calculate initial gap
    irmovq $0, %rbx             # initiate initial gap with 0
    
    # calculate row_length
    addq %r8, %r9               # $r9 == 3 * width + padding == row_length 
        irmovq $0x00, %r13      # FWD: 0x00 in %r13
        irmovq $0xff, %r14      # FWD: 0xff in %r14

    # initiate draw 
    mulq %r9, %r11              # $r11 == row_length * (height - 1)
        rrmovq %rcx, %r12       # FWD: $r12 == gap for calc. 3*gap
    addq %r11, %rax             # now %rax contains start ptr of upperleft corner
        addq %r12, %r12         # FWD: $r12 == 2 * gap
    rrmovq %rax, %r10           # now %r10 contains start ptr of upperleft corner


    # Upperleft to Lowerright
    irmovq $0, %r11             # initiate current width with 0
        addq %r12, %r12         # FWD: $r12 == 3 * gap

UL2LR_paint_row:
    rmmovb %r13, 0(%rax)
    rmmovb %r13, 1(%rax)
    rmmovb %r14, 2(%rax)

    addq %rcx, %r11             # %r11 = current width + gap
    addq %r12, %rax             # %rax = current imgptr + 3*gap
     







    # initiate draw
    # Upperright to Lowerleft


	#-----------------------------------------------------------------

	ret
