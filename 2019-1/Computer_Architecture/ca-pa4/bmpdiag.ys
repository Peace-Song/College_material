#------------------------------------------------------------------
# 
#  4190.308 Computer Architecture (Spring 2019)
#
#  Project #4: Optimizing Program for a Pipelined Y86-64 Processor
#
#  May 28, 2019
#
#  Jin-Soo Kim (jinsoo.kim@snu.ac.kr)
#  Systems Software & Architecture Laboratory
#  Dept. of Computer Science and Engineering
#  Seoul National University
#
#------------------------------------------------------------------

bmp_diag:
	# imgptr        is in %rdi  CONSTANT
	# width         is in %rsi  CONSTANT
	# height        is in %rdx  CONSTANT
	# gap 	        is in %rcx  CONSTANT
    # curr imgptr   is in %rax
    # initial gap   is in %rbx
    # padding       is in %r8   CONSTANT
    # row_length    is in %r9   CONSTANT
    # curr row ptr  is in %r10
    # curr width    is in %r11  
    # 3 * gap       is in %r12  
    # 0x00          is in %r13  
    # 0xff          is in %r14  
	#-----------------------------------------------------------------

	# FILL HERE
	# You are allowed to use any register supported by Y86-64 architecture
    # Hazard cost cycles:
    # RAW:  3 cycles
    # L/U:  3 cycles
    # call: 3 cycles
    # ret:  2 cycles
    # mispredicted branch: 2 cycles

# 1. calculate padding: padding = width mod 4 = width - 4 * (width / 4)
    irmovq $4, %r13         # %r13 = 4
        rrmovq %rdx, %r11       # FWD from 5-a: %r11 = height
    rrmovq %rsi, %r12       # %r12 = width
    rrmovq %rsi, %r8        # %r8 = width
        irmovq $3, %r9          # FWD from 4: %r9 = 3

        iaddq $-1, %r11         # FWD from 5-a: %r11 = height - 1
        rrmovq %rdi, %rax       # FWD from 2: assign current imgptr with starting imgptr
    divq %r13, %r12         # %r12 = width / 4
        irmovq $0, %rbx         # FWD from 3: initiate initial gap with 0
        mulq %r8, %r9           # FWD from 4: %r9 = 3 * width
        irmovq $0xff, %r14      # FWD from 5-a: assign 0xff
    mulq %r13, %r12         # %r12 = 4 * (width / 4)
        irmovq $0x00, %r13      # FWD from 5-a: assign 0x00
    subq %r12, %r8          # %r8 = width - 4 * (width / 4) == width mod 4 == padding
   
# 2. assign curr imgptr
    # rrmovq %rdi, %rax     # assign current imgptr with $rdi

# 3. initialize initial gap
    # irmovq $0, %rbx       # initiate initial gap with 0
    
# 4. calculate row_length
    addq %r8, %r9           # $r9 == 3 * width + padding == row_length 
        irmovq $3, %r12         # FWD from 6-a: %r12 = 3

# 5-a. initiate draw 
    # rrmovq %rdx, %r11     # $r11 == height
    # iaddq $-1, %r11       # $r11 == height - 1
    mulq %r9, %r11          # $r11 == row_length * (height - 1)

    # irmovq $0x00, %r13
    # irmovq $0xff, %r14

    addq %r11, %rax         # now %rax contains start ptr of upperleft corner
        mulq %rcx, %r12         # FWD from 6-a: %r12 = 3 * gap
        irmovq $0, %r11         # FWD from 6-a: initiate current width with 0
    rrmovq %rax, %r10       # now %r10 contains start ptr of upperleft corner

# 6-a. Upperleft to Lowerright
    # rrmovq %rcx, %r12
    # addq %rcx, %r12
    # addq %rcx, %r12       # $r12 == 3 * gap

    # irmovq $0, %r11       # initiate current width with 0

UL2LR_paint_row:
# 7-a. actual paint
    rmmovb %r13, 0(%rax)
    rmmovb %r13, 1(%rax)
    rmmovb %r14, 2(%rax)

# 8-a. move to the next pixel
    addq %rcx, %r11         # %r11 = current width + gap
    addq %r12, %rax         # %rax = current imgptr + 3*gap
     
# 9-a. decide if move to next row
    pushq %r11              # save current width
    subq %rsi, %r11         # compare: current width - width ?
    popq %r11               # restore current width
    jl UL2LR_paint_row

    # a row has been painted
# 10-a. decide next row's initial gap
    iaddq $1, %rbx          # increment the initial gap
        subq %r9, %r10          # FWD from 11-a: set current row ptr to the beneath one
    rrmovq %rbx, %r14       # %r14 temporary assignment: MUST BE RESTORED BEFORE NEXT PAINT ROW
    subq %rcx, %r14         # compare: initial gap - gap ?
    cmove %r14, %rbx        # if initial gap == gap, reset initial gap to 0

# 11-a. set imgptr
    # subq %r9, %r10        # set current row ptr to the beneath one
    rrmovq %r10, %rax       # set current imgptr to the beginning of the new row
        irmovq $0xff, %r14       # FWD from 13-a: restore pointer
        
# 12-a. prepare pointers
    rrmovq %rbx, %r11       # set current width to initial gap.
    addq %rbx, %rax     
    pushq %r10    
    addq %rbx, %rax
    addq %rbx, %rax

# 13-a. decide if jump or not - might move this logic to up front to reduce cycles
    subq %rdi, %r10         # compare: current row ptr - the very beginning imgptr ?
    popq %r10
    jge UL2LR_paint_row

# entire UL2LR job has been done.

    
# 5-b. initiate draw
    rrmovq %rdi, %rax       # restore %rax to the original imgptr

    rrmovq %rdx, %r11       # $r11 == height
    iaddq $-1, %r11         # $r11 == height - 1
    mulq %r9, %r11          # $r11 == row_length * (height - 1)

    addq %r11, %rax         # now %rax contains start ptr of upperleft corner
    rrmovq %rax, %r10       # now %r10 contains start ptr of upperleft corner


# 6-b. Upperright to Lowerleft
    rrmovq %rcx, %rbx       # set initial gap to gap
    rrmovq %rcx, %r12
    addq %rcx, %r12
    addq %rcx, %r12         # $r12 == 3 * gap

    rrmovq %rcx, %r11       # initiate current width with gap
    addq %r12, %rax         # initiate current imgptr with gap

UR2LL_paint_row:
# 7-b. actual paint
    rmmovb %r13, 0(%rax)
    rmmovb %r13, 1(%rax)
    rmmovb %r14, 2(%rax)

# 8-b. move to the next pixel
    addq %rcx, %r11             
    addq %r12, %rax

# 9-b. decide if move to next row
    pushq %r11
    subq %rsi, %r11
    popq %r11
    jl UR2LL_paint_row

    # a row has been painted
# 10-b. decide next row's initial gap
    rrmovq %rbx, %r14       # clone to %r14
        subq %r9, %r10
    iaddq $-1, %r14         # test with %r14
    cmovl %rcx, %rbx        # if $r14 == ($rbx-1) < 0, reset %rbx to gap
    iaddq $-1, %rbx         # $rbx - 1 so that in either cases we have to subtract

# 11-b. set imgptr
    #subq %r9, %r10
    rrmovq %r10, %rax
        irmovq $0xff, %r14      

# 12-b. prepare pointers
    rrmovq %rbx, %r11       
    addq %rbx, %rax
    pushq %r10
    addq %rbx, %rax
    addq %rbx, %rax

# 13-b. decide if jump or not - may be optimized
    subq %rdi, %r10
    popq %r10
    jge UR2LL_paint_row

    # entire UR2LL job has been done.

	#-----------------------------------------------------------------

	ret
