options{  static = true;  DEBUG_PARSER = false;  IGNORE_CASE = true;}PARSER_BEGIN(SimpleDBMSParser)package kr.ac.snu.ids.PRJ1_1_2014_15703;public class SimpleDBMSParser{  public static final int PRINT_SYNTAX_ERROR = 0;  public static final int PRINT_CREATE_TABLE = 1;  public static final int PRINT_DROP_TABLE   = 2;  public static final int PRINT_DESC_TABLE	 = 3;  public static final int PRINT_INSERT   	 = 4;  public static final int PRINT_DELETE 		 = 5;  public static final int PRINT_SELECT  	 = 6;  public static final int PRINT_SHOW_TABLES	 = 7;    public static void main(String args[]) throws ParseException  {    SimpleDBMSParser parser = new SimpleDBMSParser(System.in);    System.out.print("DB_2014-15703> ");    while (true)    {      try      {        parser.command();      }      catch (Exception e)      {        printMessage(PRINT_SYNTAX_ERROR);        System.out.print("DB_2014-15703> ");        SimpleDBMSParser.ReInit(System.in);      }    }  }  public static void printMessage(int q)  {    switch(q)    {      case PRINT_SYNTAX_ERROR:      	System.out.println("Syntax error");      	break;      case PRINT_CREATE_TABLE:      	System.out.println("\'CREATE TABLE\' requested");      	break;      case PRINT_DROP_TABLE:        System.out.println("\'DROP TABLE\' requested");        break;      case PRINT_DESC_TABLE:      	System.out.println("\'DESC TABLE\' requested");      	break;      case PRINT_INSERT:      	System.out.println("\'INSERT\' requested");      	break;      case PRINT_DELETE:        System.out.println("\'DELETE\' requested");        break;      case PRINT_SELECT:        System.out.println("\'SELECT\' requested");        break;      case PRINT_SHOW_TABLES:        System.out.println("\'SHOW TABLES\' requested");        break;    }  }}PARSER_END(SimpleDBMSParser)SKIP : { " " | "\r" | "\t" | "\n" { System.out.print("DB_2014-15703> "); }}TOKEN : /* Keywords */{  < EXIT : "exit" >| < INT : "int" >| < CHAR : "char" >| < DATE : "date" >| < CREATE_TABLE : "create table" >| < DROP_TABLE : "drop table" >| < DESC : "desc" >| < INSERT : "insert into" >| < DELETE : "delete from" >| < SELECT : "select" >| < SHOW_TABLES : "show tables" >| < NULL : "null" >| < PRIMARY_KEY : "primary key" >| < FOREIGN_KEY : "foreign key" >| < REFERENCES : "references" >| < VALUES : "values" >| < WHERE : "where" >| < FROM : "from" >| < OR : "or" >| < AND : "and" >| < NOT : "not" >| < IS : "is" >| < AS : "as" >}TOKEN :{  < SEMICOLON : ";" >| < LEFT_PAREN : "(" >| < RIGHT_PAREN : ")" >| < COMMA : "," >| < PERIOD: "." >| < UNDERSCORE : "_" >| < QUOTE : "'">| < ASTERISK : "*" >| < INT_VALUE : (< SIGN >)? (< DIGIT >)+>| < CHAR_STRING : < QUOTE > (< NON_QUOTE_CHARACTER >)* < QUOTE > >| < SIGN : "+" | "-" >| < DIGIT : [ "0"-"9" ] >| < NULL_OP : < IS > (< NOT >)? < NULL > > | < COMP_OP : "<" | ">" | "=" | ">=" | "<=" | "!=" >| < LEGAL_IDENTIFIER : < ALPHABET > (< ALPHABET > | < UNDERSCORE >)* >	// MUST BE FIXED| < ALPHABET : [ "a"-"z", "A"-"Z" ] >| < DATE_VALUE : < NNNN > "-" < NN > "-" < NN > >| < NNNN : < DIGIT > < DIGIT > < DIGIT > < DIGIT > >| < NN : < DIGIT > < DIGIT > >| < NON_QUOTE_SPECIAL_CHARACTERS : "!" | "@" | "#" | "$" | "%" | "^" | "&" | "-" | "{" | "}" | "[" | "]" | "~" | "`" | "+" | "*" | "_" | "=" | "\\" | "(" | ")" | "<" | ">" | "?" | "," | "." | "\n" | "\t" | "\r" | ":" | ";" | "|" | "/" >| < NON_QUOTE_CHARACTER : < DIGIT > | < ALPHABET > | < NON_QUOTE_SPECIAL_CHARACTERS > | " " >}void command() :{}{  queryList()| (    < EXIT >    < SEMICOLON >    {      System.exit(0);    }  )}void queryList() :{  int q;}{  (    q = query()    < SEMICOLON >    {      printMessage(q);    }  )+}int query() :{  int q;}{  (    (      createTableQuery()      {        q = PRINT_CREATE_TABLE;      }    )  | (	  dropTableQuery()	  {	    q = PRINT_DROP_TABLE;	  }    )  | (      descQuery()      {        q = PRINT_DESC_TABLE;      }    )  | (      insertQuery()      {        q = PRINT_INSERT;      }    )  | (      deleteQuery()      {        q = PRINT_DELETE;      }    )  | (      selectQuery()      {        q = PRINT_SELECT;      }    )  | (      showTablesQuery()      {        q = PRINT_SHOW_TABLES;      }    )  )  (    {      return q;    }  )}void createTableQuery() :{}{  < CREATE_TABLE >  tableName()  tableElementList()}void dropTableQuery() :{}{  < DROP_TABLE >  tableName()}void descQuery() :{}{  < DESC >  tableName()}void insertQuery() :{}{  < INSERT >  tableName()  (    columnNameList()  )?  valueList()}void deleteQuery() :{}{  < DELETE >  tableName()  (	whereClause()  )?}void selectQuery() :{}{  < SELECT >  selectList()  tableExpression()}void showTablesQuery() :{}{  < SHOW_TABLES >}void selectList() :{}{  < ASTERISK > | selectedColumn() (< COMMA > selectedColumn())? }void selectedColumn() :{}{  (LOOKAHEAD(2) tableName() < PERIOD >)? columnName() (< AS > columnName())?}void tableExpression() :{}{  fromClause()  (whereClause())?}void fromClause() :{}{  < FROM >  tableReferenceList()}void tableReferenceList() :{}{  referredTable()  (< COMMA > referredTable())?}void referredTable() :{}{  tableName() (< AS > tableName())?}void tableElementList() :{}{  < LEFT_PAREN >  tableElement()  (    < COMMA >    tableElement()  )*  < RIGHT_PAREN >}void tableElement() :{}{  columnDefinition()| tableConstraintDefinition()}void columnDefinition() :{}{  columnName()  dataType()  (    < NOT > < NULL >  )?}void tableConstraintDefinition() :{}{  primaryKeyConstraint()| referentialConstraint()}void primaryKeyConstraint() :{}{  < PRIMARY_KEY >  columnNameList()}void referentialConstraint() :{}{  < FOREIGN_KEY >  columnNameList()  < REFERENCES >  tableName()  columnNameList()}void columnNameList() :{}{  < LEFT_PAREN >  columnName()  (    < COMMA >    columnName()  )*  < RIGHT_PAREN >}void dataType() :{}{  < INT >| (    < CHAR >    < LEFT_PAREN >    < INT_VALUE >    < RIGHT_PAREN >  )| < DATE >}void tableName() :{}{  < LEGAL_IDENTIFIER >}void columnName() :{}{  < LEGAL_IDENTIFIER >}void valueList() :{}{  < VALUES >  < LEFT_PAREN >  value()  (    < COMMA >    value()  )*  < RIGHT_PAREN >}void value() :{}{ < NULL > | comparableValue()}void comparableValue() :{}{  < INT_VALUE > | < CHAR_STRING > | < DATE_VALUE >}void whereClause() :{}{  < WHERE >  booleanValueExpression()}void booleanValueExpression() :{}{  booleanTerm()  (	< OR >	booleanTerm()  )*}void booleanTerm() :{}{  booleanFactor()  (	< AND >	booleanFactor()  )*}void booleanFactor() :{}{  (	< NOT >  )?  booleanTest()}void booleanTest() :{}{  predicate() | parenthesizedBooleanExpression()}void parenthesizedBooleanExpression() :{}{  < LEFT_PAREN >  booleanValueExpression()  < RIGHT_PAREN >}void predicate() :{}{  (LOOKAHEAD(4) comparisonPredicate() | nullPredicate())}void comparisonPredicate() :{}{  compOperand()  < COMP_OP >  compOperand()}void compOperand() :{}{  ((LOOKAHEAD(2) tableName() < PERIOD >)? columnName()) | comparableValue()}void nullPredicate() :{}{  (LOOKAHEAD(2) tableName() < PERIOD >)? columnName()  < IS > ((< NOT > < NULL >) | < NULL >)}